<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <munit:config name="munit" doc:name="MUnit configuration" mock-connectors="false" mock-inbounds="false"/>
    <spring:beans>
        <spring:import resource="classpath:notify-communicate.xml"/>
        <spring:import resource="classpath:notify-communicate-config.xml"/>
       
    </spring:beans>
    <munit:test name="should_consume_JMS_object_message" description="Test" ignore="true">

        <mock:when messageProcessor=".*:.*" doc:name="Mock GENRIC SMTP">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Generic SMTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="&quot;Generic Mail Template&quot;"/>

        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock VERBOSE SMTP">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Verbose SMTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="&quot;Verbose Mail Template&quot;"/>

        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	"systemName": "SFDC",
	"HostName": "da-devmul-app1.tccrocks.com",
	"HostIP": "172.16.201.165",
	"mailGenericrecipients": "pbasireddy@tccrocks.com,avenkatesh@tccrocks.com",
	"mailVerboserecipients": "avenkatesh@tccrocks.com",
	"request": "{}",
	"exception": "com.mulesoft.weave.mule.exception.WeaveExecutionException",
	"mailsubject": "DEV ESB Sales Order Error Alert",
	"header": "ESB SFDC ALERT"
}]]></dw:set-payload>
        </dw:transform-message>

        
        <logger message="Munit Notify Communicate Error Flow Dummy Request ::#[payload]" level="INFO" doc:name="Logger"/>
        <flow-ref name="notify-communicate-error-Flow" doc:name="notify-communicate-error-Flow"/>
        <logger message="Munit Notify Communicate Error Flow Positive Response ::#[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-on-equals message="Generic Mail delivery Failure" expectedValue="#[payload[0]]" actualValue="&quot;Generic Mail Template&quot;" doc:name="Assert Equals"/>
        <munit:assert-on-equals message="Verbose Mail delivery Failure" expectedValue="#[payload[1]]" actualValue="&quot;Verbose Mail Template&quot;" doc:name="Assert Equals"/>
    </munit:test>
  <munit:test name="should_consume_JMS_object_message_as_Exception" description="MUnit Test" ignore="true">
        <mock:throw-an exception-ref="#[new java.lang.Exception(&quot;Test Exception for Munit Test.&quot;)]" doc:name="Throw an Exception" whenCalling=".*:.*">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['JMS-CONSUMER-NOTIFY-COMMUNICATE-ERROR']"/>
            </mock:with-attributes>

   
        </mock:throw-an>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Generic SMTP">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Generic SMTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="&quot;DataweaveExceptionCaught&quot;"/>


        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Verbose SMTP">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Verbose SMTP']"/>
            </mock:with-attributes>
            <mock:then-return payload="&quot;SQLExceptionCaught&quot;"/>

        </mock:when>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	"systemName": "SFDC",
	"HostName": "da-devmul-app1.tccrocks.com",
	"HostIP": "172.16.201.165",
	"mailGenericrecipients": "pbasireddy@tccrocks.com,avenkatesh@tccrocks.com",
	"mailVerboserecipients": "avenkatesh@tccrocks.com",
	"request": "{}",
	"exception": "com.mulesoft.weave.mule.exception.WeaveExecutionException",
	"mailsubject": "DEV ESB Sales Order Error Alert",
	"header": "ESB SFDC ALERT"
}]]></dw:set-payload>
        </dw:transform-message>

        <logger message="Munit Notify Communicate Error Flow Dummy  Request ::#[payload]" level="INFO" doc:name="Logger"/>
        <flow-ref name="notify-communicate-error-Flow" doc:name="notify-communicate-error-Flow"/>
        <logger message="Munit Notify Communicate Error Flow Negative Response :: #[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-on-equals message="&quot;Dataweave Exception Caught&quot;" expectedValue="&quot;DataweaveExceptionCaught&quot;" actualValue="&quot;DataweaveExceptionCaught&quot;" doc:name="Assert Equals"/>
        <munit:assert-on-equals message="&quot;SQL Exception Caught&quot;" expectedValue="&quot;SQLExceptionCaught&quot;" actualValue="&quot;SQLExceptionCaught&quot;" doc:name="Assert Equals"/>
    </munit:test> 
    </mule>
