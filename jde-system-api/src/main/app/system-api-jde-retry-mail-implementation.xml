<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">


	<flow name="system-api-jde-salesorder-implementationFlow-Retry-Queue-Flow" processingStrategy="synchronous">
		<message-properties-transformer scope="invocation" doc:name="Message Properties">
            <add-message-property key="appId" value="${jde.app.salesorder.recovery.appid}"/>
            <add-message-property key="appMethod" value="${jde.app.salesorder.recovery.appresource}"/>
            <add-message-property key="appResource" value="${jde.app.salesorder.recovery.appmethod}"/>
            <add-message-property key="transaction_id" value="#[flowVars.orderId + '_' + ${jde.app.salesorder.recovery.appid} + '_' + message.id]"/>
        </message-properties-transformer>
        <message-properties-transformer doc:name="Message Properties">
            <add-message-property key="CORRELATION_ID" value="#[flowVars.orderId]"/>
            <add-message-property key="RETRY_ATTEMPT_COUNT" value="#[flowVars.RETRY_COUNT]"/>
            <add-message-property key="REQUEST_TYPE" value="${jde.app.salesorder.recovery.servicename}"/>
            <add-message-property key="AMQ_SCHEDULED_DELAY" value="${jde.app.salesorder.recovery.q.delay}"/>
        </message-properties-transformer>
        <set-payload value="#[flowVars.jdeWSRequest]" doc:name="Set Payload"/>
        <scatter-gather doc:name="Scatter-Gather">
            <processor-chain>
                <set-payload value="#[flowVars.orderId]" doc:name="Set Payload"/>
                <logger message="JDE Salesorder Failed again and pushing to Q for #[flowVars.RETRY_COUNT]" level="INFO" doc:name="Logger"/>
                <jms:outbound-endpoint queue="${jde.app.salesorder.recovery.q}" connector-ref="Active_MQ" doc:name="JMS"/>
            </processor-chain>
            <flow-ref name="atg-push-payload-db" doc:name="atg-push-payload-db"/>
        </scatter-gather>
	
	</flow>
	
	
	<flow name="system-api-jde-customer-implementationFlow-Retry-Queue-Flow" processingStrategy="synchronous">
		<message-properties-transformer scope="invocation" doc:name="Message Properties">
            <add-message-property key="appId" value="${jde.app.customer.recovery.appid}"/>
            <add-message-property key="appMethod" value="${jde.app.customer.recovery.appresource}"/>
            <add-message-property key="appResource" value="${jde.app.customer.recovery.appmethod}"/>
            <add-message-property key="correlation_id" value="#[flowVars.orderId + '_' + ${jde.app.customer.recovery.appid} + '_' + message.id]"/>
        </message-properties-transformer>
        <message-properties-transformer doc:name="Message Properties">
            <add-message-property key="CORRELATION_ID" value="#[flowVars.orderId]"/>
            <add-message-property key="RETRY_ATTEMPT_COUNT" value="#[flowVars.RETRY_COUNT]"/>
            <add-message-property key="REQUEST_TYPE" value="${jde.app.customer.recovery.servicename}"/>
            <add-message-property key="AMQ_SCHEDULED_DELAY" value="${jde.app.customer.recovery.q.delay}"/>
        </message-properties-transformer>
        <set-payload value="#[flowVars.jdeCustomerWSRequest]" doc:name="Set Payload"/>
        <scatter-gather doc:name="Scatter-Gather">
            <processor-chain>
                <set-payload value="#[flowVars.orderId]" doc:name="Set Payload"/>
                <logger message="JDE Customer failed again and pushing to Q for #[flowVars.RETRY_COUNT]" level="INFO" doc:name="Logger"/>
                <jms:outbound-endpoint queue="${jde.app.customer.recovery.q}" connector-ref="Active_MQ" doc:name="JMS"/>
            </processor-chain>
            <flow-ref name="atg-push-payload-db" doc:name="atg-push-payload-db"/>
        </scatter-gather>
	
	</flow>
	
	
	<flow name="atg-jdeSalesorderFlow-retry-from-queue" processingStrategy="synchronous">
       <jms:inbound-endpoint queue="${jde.app.salesorder.recovery.q}" connector-ref="Active_MQ" doc:name="JMS"/>
        <message-properties-transformer scope="invocation" doc:name="Message Properties">
            <add-message-property key="appId" value="${jde.app.salesorder.recovery.appid}"/>
            <add-message-property key="orderId" value="#[payload]"/>
            <add-message-property key="RETRY_COUNT" value="#[Integer.parseInt(null != message.inboundProperties.RETRY_ATTEMPT_COUNT? message.inboundProperties.RETRY_ATTEMPT_COUNT:1)+1]"/>
        </message-properties-transformer>
        <logger message="JMS Queue Reading the order ID - #[payload] and repushing for #[message.inboundProperties.RETRY_ATTEMPT_COUNT] time" level="INFO" doc:name="Logger"/>

        <flow-ref name="db-fetch-results" doc:name="db-fetch-results"/>
        <logger message="DB Fetch Results done ? #[payload]" level="INFO" doc:name="Logger"/>

        <flow-ref name="api-jde-so-flow" doc:name="api-jde-so-flow"/>

    </flow>
    
    
    <flow name="atg-jdeCustomerFlow-retry-from-queue" processingStrategy="synchronous">
       <jms:inbound-endpoint queue="${jde.app.customer.recovery.q}" connector-ref="Active_MQ" doc:name="JMS"/>

        
        <message-properties-transformer scope="invocation" doc:name="Message Properties">
            <add-message-property key="appId" value="${jde.app.customer.recovery.appid}"/>
            <add-message-property key="orderId" value="#[payload]"/>
            <add-message-property key="RETRY_COUNT" value="#[Integer.parseInt(null != message.inboundProperties.RETRY_ATTEMPT_COUNT? message.inboundProperties.RETRY_ATTEMPT_COUNT:1)+1]"/>
        </message-properties-transformer>
        <logger message="JMS Queue Reading the order ID - #[payload] and repushing for #[message.inboundProperties.RETRY_ATTEMPT_COUNT] time" level="INFO" doc:name="Logger"/>

        <flow-ref name="db-fetch-results" doc:name="db-fetch-results"/>
        <logger message="DB Fetch Results done ? #[payload]" level="INFO" doc:name="Logger"/>

        <flow-ref name="api-jde-customer-flow" doc:name="api-jde-customer-flow"/>

    </flow>
    
    <sub-flow name="atg-push-payload-db">
        <enricher source="#[payload]" target="#[flowVars.isDeleted]" doc:name="Message Enricher">
            <flow-ref name="delete-record-from-APP-Sync" doc:name="delete-record-from-APP-Sync"/>
        </enricher>

    	<db:stored-procedure config-ref="Oracle_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[{
      call MULE_OWNER.insert_app_recovery_sync_pay(APP_RECOVERY_SYNC_SEQ.nextVal,:vapp_id,:vapp_resource, :vapp_method,:vcorrelation_id,:vtransaction_id,:vrequest,:vretry_count,:vcreate_ts,:vupdate_ts)
    }]]></db:parameterized-query>
            <db:in-param name="vapp_id" value="#[flowVars.appId]"/>
            <db:in-param name="vapp_resource" value="#[flowVars.appResource]"/>
            <db:in-param name="vapp_method" value="#[flowVars.appMethod]"/>
            <db:in-param name="vcorrelation_id" value="#[flowVars.orderId.toString()]"/>
            <db:in-param name="vretry_count" value="#[flowVars.RETRY_COUNT]"/>
            <db:in-param name="vcreate_ts" value="#[function:now]"/>
            <db:in-param name="vupdate_ts" value="#[function:now]"/>
            <db:in-param name="vtransaction_id" value="#[flowVars.transaction_id]"/>
            <db:in-param name="vrequest" value="#[message.payloadAs(java.lang.String)]"/>



            
</db:stored-procedure>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	success:{
		"code":"200",
		"message":"SalesOrder - " ++ flowVars.salesOrderId ++ " is pushed to APP SYNC RECOVERY DB Successfully"
	}
	
}]]></dw:set-payload>
        </dw:transform-message>


    </sub-flow>
    
    <sub-flow name="db-fetch-results">
        <transactional action="ALWAYS_BEGIN" doc:name="Transactional">
            <logger message="DB Fetch Results Select Query ? select * from APP_RECOVERY_SYNC_PAYLOAD where CORRELATION_ID = '#[flowVars.orderId]' and APP_ID = '#[flowVars.appId]'" level="INFO" doc:name="Logger"/>
            <db:select config-ref="Oracle_Configuration" doc:name="Database">
                <db:dynamic-query><![CDATA[select * from APP_RECOVERY_SYNC_PAYLOAD where CORRELATION_ID = '#[flowVars.orderId]' and APP_ID = '#[flowVars.appId]']]></db:dynamic-query>



            </db:select>
            <logger message="Payload ? #[payload] :: #[payload.size()==0] :: #[payload.size()]" level="INFO" doc:name="Logger"/>
            <choice doc:name="Choice">
                <when expression="#[payload != null &amp;&amp; payload.size() &gt; 0]">
                   <dw:transform-message doc:name="Transform Message">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	ID: $.ID,
	CREATE_TS : $.CREATE_TS,
	UPDATE_TS: $.UPDATE_TS,
	REQUEST : ($.REQUEST.characterStream) when $.REQUEST? otherwise ""
}]]></dw:set-payload>
                    </dw:transform-message>
                    <set-payload value="#[payload[0].REQUEST]" mimeType="application/xml" doc:name="Set Payload"></set-payload>
                </when>
                <otherwise>
                    <logger message="No Records found for this order in DB Table - Hence Stopping the record here" level="INFO" doc:name="Logger"/>
                    <expression-filter expression="false" doc:name="Expression"/>
                </otherwise>
            </choice>
        </transactional>

        
    	
    </sub-flow>

	<sub-flow name="delete-record-from-APP-Sync">
        <logger message="Delete Record from APP Recovery Select Query ? select * from MULE_OWNER.APP_RECOVERY_SYNC_PAYLOAD where CORRELATION_ID = #[flowVars.orderId] and APP_ID = #[flowVars.appId]" level="INFO" doc:name="Logger"/>
        <db:select config-ref="Oracle_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[select * from MULE_OWNER.APP_RECOVERY_SYNC_PAYLOAD where CORRELATION_ID = #[flowVars.orderId] and APP_ID = #[flowVars.appId]]]></db:parameterized-query>






        </db:select>

        <choice doc:name="Choice">
            <when expression="#[payload.size() &gt; 0]">
                <logger message="Delete Record from APP Recovery Delete Query ? delete from APP_RECOVERY_SYNC_PAYLOAD where CORRELATION_ID = #[flowVars.orderId] and APP_ID = #[flowVars.appId]" level="INFO" doc:name="Logger"/>

                <db:delete config-ref="Oracle_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[delete from APP_RECOVERY_SYNC_PAYLOAD where CORRELATION_ID = #[flowVars.orderId] and APP_ID = #[flowVars.appId]]]></db:parameterized-query>



                </db:delete>
            </when>
            <otherwise>
                <logger message="APP RECOVERY DB - Delete the Existing Record Flow - No Record found with this ID" level="INFO" doc:name="Logger" category="tcc.salesorder.db"/>
            </otherwise>
        </choice>
    </sub-flow>
    
    <flow name="system-api-jde-salesorder-implementationFlow-Mail-Flow" processingStrategy="synchronous">
    	<dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	systemName: p('jde.salesorder.mail.systemname'),
	HostName:outboundProperties.host,
	HostIP:outboundProperties.ipAddress,
	mailVerboserecipients: p('jde.systemapi.verbose.mailrecipients'),
	mailGenericrecipients: p('jde.systemapi.generic.mailrecipients'),
	(request: outboundProperties.request),
	exception: outboundProperties.exceptionMsg,
	mailsubject : p('smtp.mail.jde.salesorder.subject.prefix') ++ outboundProperties.mailsubject,
	header: p('jde.salesorder.mail.header'),
	salesorderFailureLink:p('salesorder.failure.alert.link') ++ ((outboundProperties.orderId) when outboundProperties.orderId? otherwise '') ++ "&startDate=" ++ outboundProperties.startDate as :string {format: "yyyy/MM/dd"}
}]]></dw:set-payload>
            </dw:transform-message>
            <logger message="Error Message Details to Q - #[payload]" level="INFO" doc:name="Logger"/>
            <jms:outbound-endpoint doc:name="JMS" connector-ref="Active_MQ" queue="${error.notifications.queue}"/>
    </flow>
    
    
    <flow name="system-api-jde-customer-implementationFlow-Mail-Flow" processingStrategy="synchronous">
    	<dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	systemName: p('jde.customer.mail.systemname'),
	HostName:outboundProperties.host,
	HostIP:outboundProperties.ipAddress,
	mailVerboserecipients: p('jde.systemapi.verbose.mailrecipients'),
	mailGenericrecipients: p('jde.systemapi.generic.mailrecipients'),
	(request: outboundProperties.request),
	exception: outboundProperties.exceptionMsg,
	mailsubject : p('smtp.mail.jde.customer.subject.prefix') ++ outboundProperties.mailsubject,
	header: p('jde.customer.mail.header')
}]]></dw:set-payload>
            </dw:transform-message>
            <logger message="Error Message Details to Q - #[payload]" level="INFO" doc:name="Logger"/>
            <jms:outbound-endpoint doc:name="JMS" connector-ref="Active_MQ" queue="${error.notifications.queue}"/>
    </flow>
    
    
</mule>
