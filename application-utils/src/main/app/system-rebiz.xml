<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">

    <apikit:config name="system-rebiz-config" raml="system-rebiz.raml" consoleEnabled="false" doc:name="Router" keepRamlBaseUri="false"/>
    <sftp:connector name="atg-rebiz-sftp-connector-config" validateConnections="true" duplicateHandling="overwrite" doc:name="SFTP">
        <reconnect frequency="${mule.sftp.outbound.retry.frequency.between}" count="${mule.sftp.outbound.retry}"/>
    </sftp:connector>
    <ftp:connector name="FTP" pollingFrequency="1000" streaming="true" validateConnections="true" doc:name="FTP">
        <reconnect frequency="${mule.sftp.outbound.retry.frequency.between}" count="${mule.sftp.outbound.retry}"/>
    </ftp:connector>
    <file:connector name="File" autoDelete="false" outputAppend="true" streaming="true" validateConnections="true" doc:name="File"/>

    <flow name="system-rebiz-main">
        <http:listener config-ref="shared-httpListenerConfig" path="obiee-api/*" doc:name="HTTP"/>
        <apikit:router config-ref="system-rebiz-config" doc:name="APIkit Router"/>
        <exception-strategy ref="system-rebiz-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="system-rebiz-console">
        <http:listener config-ref="shared-httpListenerConfig" path="obiee-api/console/*" doc:name="HTTP"/>
        <apikit:console config-ref="system-rebiz-config" doc:name="APIkit Console"/>
    </flow>
    <flow name="post:/db/rebiz:application/json:system-rebiz-config">
        <flow-ref name="insert-into-DB" doc:name="insert-into-DB"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "success": {
    "code": "200",
    "message": "Rebiz- pushed to DB Successfully"
   }
}]]></dw:set-payload>
        </dw:transform-message>

    </flow>
    <flow name="post:/db/rebiz_insertion:application/json:system-rebiz-config">
        <flow-ref name="rebiz-insertion" doc:name="rebiz-insertion"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "success": {
    "code": "200",
    "message": "Rebiz- pushed to DB Successfully"
   }
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>
    <apikit:mapping-exception-strategy name="system-rebiz-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
    <batch:job name="system-rebizBatch" max-failed-records="-1">
        <batch:process-records>
            <batch:step name="Batch_Step" accept-policy="ALL">
                <logger message="log in batch:  #[message.payload]" level="INFO" doc:name="Logger"/>
                <dw:transform-message metadata:id="320f34ad-1b8b-4fab-81a8-3f3c66e1ce40" doc:name="Transform Message">
                <dw:input-payload mimeType="application/java"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	orderId: payload.orderId,
	commerceLineId: payload.commerceLineId ,
	lineGrossProfit: payload.lineGrossProfit,
	rebizPublished: payload.rebizPublished
}]]></dw:set-payload>
                </dw:transform-message>

                <flow-ref name="system-rebizFlow-upsertFlow" doc:name="system-rebizFlow-upsertFlow"/>
            </batch:step>
            <batch:step name="Batch_Step-DB-Failures" accept-expression="#['FAILURE' == payload.status]" accept-policy="ALL">
                <logger message="Failed Record ? #[payload]" level="INFO" doc:name="Logger"/>
                <batch:commit streaming="true" doc:name="Batch Commit">
                    <flow-ref name="system-rebizFlow-errors-csv" doc:name="system-rebizFlow-errors-csv"/>
                </batch:commit>
            </batch:step>
            <batch:step name="Batch_Step-Success-Records" accept-expression="#['SUCCESS' == payload.status]" accept-policy="ALL">
                <logger message="Success Record ? #[payload]" level="INFO" doc:name="Logger"/>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <logger message="Total Records=#[payload.loadedRecords] Success Records=#[payload.successfulRecords]  Failed Records=#[payload.failedRecords] " level="INFO" doc:name="Logger"/>
        </batch:on-complete>
    </batch:job>
    <flow name="system-rebizFlow-upsertFlow" processingStrategy="synchronous">
        <enricher source="#[payload]" target="#[flowVars.commerceLine]" doc:name="Message Enricher">
            <db:select config-ref="Oracle_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[select COMMERCE_LINE_ITEM_ID from SO_COMM_LINE_ITEMS where LOWER(TRIM(COMMERCE_LINE_ITEM_ID))=#[message.payload.commerceLineId] and LOWER(TRIM(SALESORDER_ID))=#[message.payload.orderId]]]></db:parameterized-query>



            </db:select>
        </enricher>
        <choice doc:name="Choice">
            <when expression="#[flowVars.commerceLine !=null &amp;&amp; flowVars.commerceLine.size() &gt; 0]">
                <logger message="Commerce Item Id is updated into the table" level="INFO" doc:name="Logger"/>
                <enricher source="#[payload]" target="#[flowVars.dbSuccess]" doc:name="Message Enricher">
                    <db:update config-ref="Oracle_Configuration" doc:name="Database">
                        <db:parameterized-query><![CDATA[update SO_COMM_LINE_ITEMS set LINE_GROSS_PROFIT=#[message.payload.lineGrossProfit], UPDATE_TS=#[function:now], REBIZ_PUBLISHED=#[message.payload.rebizPublished]  where COMMERCE_LINE_ITEM_ID=#[message.payload.commerceLineId] and SALESORDER_ID=#[message.payload.orderId]]]></db:parameterized-query>


                    </db:update>
                </enricher>
            </when>
            <otherwise>
                <logger message="Commerce Item Id is inserted into the table" level="INFO" doc:name="Logger"/>
                <enricher source="#[payload]" target="#[flowVars.dbSuccess]" doc:name="Message Enricher">
                    <db:insert config-ref="Oracle_Configuration" doc:name="Database">
                        <db:parameterized-query><![CDATA[insert into SO_COMM_LINE_ITEMS(ID,SALESORDER_ID,COMMERCE_LINE_ITEM_ID,LINE_GROSS_PROFIT,CREATE_TS,REBIZ_PUBLISHED) values(SO_COMM_LINE_ITEMS_SEQ.NEXTVAL,LOWER(TRIM(#[message.payload.orderId])),LOWER(TRIM(#[message.payload.commerceLineId])),#[message.payload.lineGrossProfit],#[function:now],#[message.payload.rebizPublished])]]></db:parameterized-query>
                    </db:insert>

                </enricher>
            </otherwise>
        </choice>
        <dw:transform-message doc:name="Transform Message">
        <dw:input-payload mimeType="application/java"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
  status: "SUCCESS",
  orderId: payload.orderId,
  commerceLineId: payload.commerceLineId ,
  lineGrossProfit: payload.lineGrossProfit,
  rebizPublished: payload.rebizPublished
}]]></dw:set-payload>
        </dw:transform-message>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
  status: "FAILURE",
  orderId: payload.orderId,
  commerceLineId: payload.commerceLineId ,
  lineGrossProfit: payload.lineGrossProfit,
  rebizPublished: payload.rebizPublished
}]]></dw:set-payload>
            </dw:transform-message>
        </catch-exception-strategy>
    </flow>
    <flow name="rebiz-insertion">
        <object-to-string-transformer doc:name="Object to String"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
  orderId: trim $.orderId,
  commerceLineId: trim $.commerceLineId ,
  lineGrossProfit: $.lineGrossProfit,
  rebizPublished: $.rebizPublished
}]]></dw:set-payload>
        </dw:transform-message>

        <batch:execute name="system-rebizBatch1" doc:name="system-rebizBatch1"/>
    </flow>
    <batch:job name="system-rebizBatch1" max-failed-records="-1">
        <batch:process-records>
            <batch:step name="Batch_Step2" accept-policy="ALL">
                <logger level="INFO" doc:name="Logger" message="log in batch:  #[message.payload]"/>
                <dw:transform-message doc:name="Transform Message">
                <dw:input-payload mimeType="application/java"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	orderId: payload.orderId,
	commerceLineId: payload.commerceLineId ,
	lineGrossProfit: payload.lineGrossProfit,
	rebizPublished: payload.rebizPublished
}]]></dw:set-payload>
                </dw:transform-message>

                <flow-ref name="system-rebizFlow-insertion" doc:name="system-rebizFlow-insertion"/>
            </batch:step>
            <batch:step name="Batch_Step1" accept-expression="#['FAILURE' == payload.status]" accept-policy="ALL">
                <logger message="Failed Record ? #[payload]" level="INFO" doc:name="Logger"/>
                <batch:commit streaming="true" doc:name="Batch Commit">
                    <flow-ref name="system-rebizFlow-errors-csv" doc:name="system-rebizFlow-errors-csv"/>
                </batch:commit>
            </batch:step>
            <batch:step name="Batch_Step3" accept-expression="#['SUCCESS' == payload.status]" accept-policy="ALL">
                <logger message="Success Record ? #[payload]" level="INFO" doc:name="Logger"/>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <logger message="Total Records=#[payload.loadedRecords] Success Records=#[payload.successfulRecords]  Failed Records=#[payload.failedRecords] " level="INFO" doc:name="Logger"/>
        </batch:on-complete>
    </batch:job>
    <flow name="system-rebizFlow-insertion">
        <enricher source="#[payload]" target="#[flowVars.commerceLine]" doc:name="Message Enricher">
            <db:select config-ref="Oracle_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[select COMMERCE_LINE_ITEM_ID from SO_COMM_LINE_ITEMS where LOWER(TRIM(COMMERCE_LINE_ITEM_ID)) LIKE #[message.payload.commerceLineId] and LOWER(TRIM(SALESORDER_ID)) LIKE LOWER(TRIM(#[message.payload.orderId]))]]></db:parameterized-query>
            </db:select>

        </enricher>
        <choice doc:name="Choice">
            <when expression="#[flowVars.commerceLine ==null || flowVars.commerceLine.size() == 0]">
                <db:insert config-ref="Oracle_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[insert into SO_COMM_LINE_ITEMS(ID,SALESORDER_ID,COMMERCE_LINE_ITEM_ID,LINE_GROSS_PROFIT,CREATE_TS,REBIZ_PUBLISHED) values(SO_COMM_LINE_ITEMS_SEQ.NEXTVAL,LOWER(TRIM(#[message.payload.orderId])),LOWER(TRIM(#[message.payload.commerceLineId])),#[message.payload.lineGrossProfit],#[function:now],0)]]></db:parameterized-query>

                </db:insert>
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
  status: "SUCCESS",
  orderId: payload.orderId,
  commerceLineId: payload.commerceLineId ,
  lineGrossProfit: payload.lineGrossProfit,
  rebizPublished: payload.rebizPublished
}]]></dw:set-payload>
                </dw:transform-message>
                <logger message="Rebiz Records Insertion -  Added" level="INFO" doc:name="Logger"/>
            </when>
            <when expression="#[flowVars.commerceLine !=null || flowVars.commerceLine.size() &gt; 0]">
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-variable variableName="orderId"><![CDATA[%dw 1.0
%output application/java
---
{
  status: "RECORD ALREADY EXISTS",
  orderId: payload.orderId,
  commerceLineId: payload.commerceLineId ,
  lineGrossProfit: payload.lineGrossProfit,
  rebizPublished: payload.rebizPublished
}]]></dw:set-variable>

                </dw:transform-message>
                <logger message="Rebiz Records Insertion - Already exists - No action" level="INFO" doc:name="Logger"/>

            </when>
            <otherwise>
                <logger message="Default in choice " level="INFO" doc:name="Logger"/>

            </otherwise>
        </choice>

        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
  status: "FAILURE",
  orderId: payload.orderId,
  commerceLineId: payload.commerceLineId ,
  lineGrossProfit: payload.lineGrossProfit,
  rebizPublished: payload.rebizPublished
}]]></dw:set-payload>
            </dw:transform-message>
        </catch-exception-strategy>
    </flow>
    <flow name="insert-into-DB">
        <object-to-string-transformer doc:name="Object to String"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
  orderId: trim $.orderId,
  commerceLineId: trim $.commerceLineId ,
  lineGrossProfit: $.lineGrossProfit,
  rebizPublished: $.rebizPublished
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message=" #[message.payload]" level="INFO" doc:name="Logger"/>
        <batch:execute name="system-rebizBatch" doc:name="system-rebizBatch"/>

    </flow>
    <flow name="system-rebizFlow-errors-csv" processingStrategy="synchronous">
        <set-payload value="#[org.apache.commons.collections.IteratorUtils.toList(payload)]" doc:name="Set Payload"/>
        <choice doc:name="Choice">
            <when expression="#[payload.size() !=0]">
                <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator="|"
---
payload]]></dw:set-payload>
                </dw:transform-message>
                <logger message="To be write into file" level="INFO" doc:name="Logger"/>
                <file:outbound-endpoint path="${mule.sftp.path.input.obiee.error}" outputPattern="GrossProfit_#[server.dateTime.format(&quot;yyyyMMddHHmmss&quot;)].txt" connector-ref="File" responseTimeout="10000" doc:name="File"/>

            </when>
            <otherwise>
                <logger message="No records " level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>
</mule>
