<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">


	<flow name="system-api-oic-implementationFlow-Retry-Queue-Flow" processingStrategy="synchronous">
		<message-properties-transformer scope="invocation" doc:name="Message Properties">
            <add-message-property key="appId" value="${oic.app.sync.recovery.appid}"/>
            <add-message-property key="appMethod" value="${oic.app.sync.recovery.appresource}"/>
            <add-message-property key="appResource" value="${oic.app.sync.recovery.appmethod}"/>
            <add-message-property key="correlation_id" value="#[flowVars.salesOrderId + '_' + ${oic.app.sync.recovery.appid} + '_' + message.id]"/>
        </message-properties-transformer>
        <message-properties-transformer doc:name="Message Properties">
            <add-message-property key="CORRELATION_ID" value="#[flowVars.correlation_id]"/>
            <add-message-property key="RETRY_ATTEMPT_COUNT" value="#[flowVars.RETRY_COUNT]"/>
            <add-message-property key="REQUEST_TYPE" value="${oic.app.sync.recovery.servicename}"/>
            <add-message-property key="AMQ_SCHEDULED_DELAY" value="${oic.app.sync.recovery.q.delay}"/>
        </message-properties-transformer>
      <choice doc:name="Choice">
            <when expression="#[payload.contains(&quot;Connection Exception&quot;)]">
                <set-payload value="#[flowVars.oicWSRequest]" doc:name="Set Payload"/>
                <scatter-gather doc:name="Scatter-Gather">
                    <processor-chain>
                        <set-payload value="#[flowVars.salesOrderId]" doc:name="Set Payload"/>
                        <logger message="OIC Failed again and pushing to Q for #[flowVars.RETRY_COUNT]" level="INFO" doc:name="Logger"/>
                        <jms:outbound-endpoint queue="${oic.app.sync.recovery.q}" connector-ref="Active_MQ" doc:name="JMS"/>
                    </processor-chain>
                    <flow-ref name="atg-push-payload-db" doc:name="atg-push-payload-db"/>
                </scatter-gather>
            
      </when>
            <otherwise>
                <logger message="OIC Flow - Order ID Response is other than Connection Exception - Trying to delete the entry from APP_SYNC_RECOVERY table if exists" level="INFO" doc:name="Logger"/>
                <flow-ref name="delete-record-from-APP-Sync" doc:name="delete-record-from-APP-Sync"/>
            </otherwise>
      </choice>
	
	</flow>
	
	
	<flow name="atg-oicFlow-retry-from-queue" processingStrategy="synchronous">
       <jms:inbound-endpoint queue="${oic.app.sync.recovery.q}" connector-ref="Active_MQ" doc:name="JMS"/>
        <set-variable variableName="RETRY_COUNT" value="#[Integer.parseInt(message.inboundProperties.RETRY_ATTEMPT_COUNT)+1]" doc:name="Variable"/>
        <set-variable variableName="salesOrderId" value="#[payload]" doc:name="Variable"/>
        <logger message="JMS Queue Reading the order ID - #[payload] and repushing for #[message.inboundProperties.RETRY_ATTEMPT_COUNT] time" level="INFO" doc:name="Logger"/>

        <flow-ref name="db-fetch-results" doc:name="db-fetch-results"/>
        <logger message="DB Fetch Results done ? #[payload]" level="INFO" doc:name="Logger"/>

        <flow-ref name="atg-oic-so-flow" doc:name="atg-oic-so-flow"/>

    </flow>
    
    <sub-flow name="atg-push-payload-db">
        <enricher source="#[payload]" target="#[flowVars.isDeleted]" doc:name="Message Enricher">
            <flow-ref name="delete-record-from-APP-Sync" doc:name="delete-record-from-APP-Sync"/>
        </enricher>

    	<db:stored-procedure config-ref="Oracle_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[{
      call MULE_OWNER.insert_app_recovery_sync_pay(APP_RECOVERY_SYNC_SEQ.nextVal,:vapp_id,:vapp_resource, :vapp_method,:vcorrelation_id,:vtransaction_id,:vrequest,:vretry_count,:vcreate_ts,:vupdate_ts)
    }]]></db:parameterized-query>
            <db:in-param name="vapp_id" value="#[flowVars.appId]"/>
            <db:in-param name="vapp_resource" value="#[flowVars.appResource]"/>
            <db:in-param name="vapp_method" value="#[flowVars.appMethod]"/>
            <db:in-param name="vcorrelation_id" value="#[flowVars.correlation_id]"/>
            <db:in-param name="vretry_count" value="#[flowVars.RETRY_COUNT]"/>
            <db:in-param name="vcreate_ts" value="#[function:now]"/>
            <db:in-param name="vupdate_ts" value="#[function:now]"/>
            <db:in-param name="vtransaction_id" value="#[flowVars.salesOrderId.toString()]"/>
            <db:in-param name="vrequest" value="#[message.payloadAs(java.lang.String)]"/>

            
</db:stored-procedure>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	success:{
		"code":"200",
		"message":"SalesOrder - " ++ flowVars.salesOrderId ++ " is pushed to APP SYNC RECOVERY DB Successfully"
	}
	
}]]></dw:set-payload>
        </dw:transform-message>


    </sub-flow>
    
    <sub-flow name="db-fetch-results">
        <transactional action="ALWAYS_BEGIN" doc:name="Transactional">
            <db:select config-ref="Oracle_Configuration" doc:name="Database">
                <db:dynamic-query><![CDATA[select * from APP_RECOVERY_SYNC_PAYLOAD where TRANSACTION_ID = '#[flowVars.salesOrderId]']]></db:dynamic-query>

            </db:select>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	ID: $.ID,
	CREATE_TS : $.CREATE_TS,
	UPDATE_TS: $.UPDATE_TS,
	REQUEST : ($.REQUEST.characterStream) when $.REQUEST? otherwise ""
}]]></dw:set-payload>
            </dw:transform-message>
            <scripting:component doc:name="Groovy">
                <scripting:script engine="Groovy"><![CDATA[
def slurper = new groovy.json.JsonSlurper();
def result = "";
for (objKey in payload) {
	result = slurper.parseText(objKey.REQUEST);
}
return result;]]></scripting:script>
            </scripting:component>


            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://xmlns.oracle.com/apps/incentiveCompensation/cn/transactionProcessing/transactionManagement/publicService/types/
%namespace ns1 http://xmlns.oracle.com/apps/incentiveCompensation/cn/transactionProcessing/transactionManagement/publicService/
%namespace ns2 http://xmlns.oracle.com/adf/svc/types/
---
{
	ns0#processIncentiveTransactionStaging: {
		ns0#changeOperation: 'Merge',
		(payload.commerceItems.commerceItem map ((transactionStagingPayload, transactionStagingPayloadIndex) -> {
		
		ns0#incentiveTransactionStaging: {
			ns1#Attribute1: payload.OrderHeader.storeInfo.commissionableStoreInfo.commissionableStoreId,
			ns1#Attribute11: payload.OrderHeader.agentInfo.agentId,
			ns1#Attribute15: payload.OrderHeader.customerInfo.tccCustomerName,
			ns1#Attribute2: payload.OrderHeader.storeInfo.commissionableStoreInfo.commissionableStoreName,
			ns1#Attribute25: payload.OrderHeader.agentInfo.commissionableAgentId,
			ns1#Attribute26: payload.OrderHeader.agentInfo.commissionableAgentOrgRole,
			ns1#Attribute29: payload.OrderHeader.storeInfo.commissionableStoreInfo.commissionableStoreAreaId,
			ns1#Attribute4: payload.OrderHeader.storeInfo.commissionableStoreInfo.commissionableStoreDistrictId,
			ns1#Attribute5: payload.OrderHeader.storeInfo.commissionableStoreInfo.commissionableStoreDistrictName,
			ns1#Attribute6: payload.OrderHeader.storeInfo.commissionableStoreInfo.commissionableStoreMarketId,
			ns1#Attribute7: payload.OrderHeader.storeInfo.commissionableStoreInfo.commissionableStoreMarketName,
			ns1#Attribute8: payload.OrderHeader.storeInfo.commissionableStoreInfo.commissionableStoreAreaName,
			ns1#Attribute41: transactionStagingPayload.commercelineItemId,
			ns1#Attribute16: transactionStagingPayload.skuId,
			ns1#Attribute17: transactionStagingPayload.skuDescription,
			ns1#Attribute19: transactionStagingPayload.categoryId,
			ns1#TransactionQuantity: transactionStagingPayload.quantity,
			ns1#SourceEventDate: transactionStagingPayload.FulfillmentDate,
			ns1#Attribute44: transactionStagingPayload.itemType,
			ns1#AttributeNumber7: (transactionStagingPayload.listPrice when transactionStagingPayload.listPrice? otherwise transactionStagingPayload.commissionPayableAmount) - (transactionStagingPayload.itemCost when transactionStagingPayload.itemCost != "" otherwise '0'),
			ns1#Attribute14: transactionStagingPayload.serviceTransactionID,
			ns1#Attribute12: transactionStagingPayload.mobileNumber,
			ns1#Attribute42: transactionStagingPayload.deviceCategory,
			ns1#Attribute39: transactionStagingPayload.activationType,
			ns1#Attribute40: transactionStagingPayload.contractType,
			ns1#AttributeNumber1: transactionStagingPayload.itemCost when transactionStagingPayload.skuIdType == 'original' otherwise '0',
			ns1#InvoiceNumber: payload.OrderHeader.orderInfo.orderId,
			ns1#ParticipantId: payload.OrderHeader.agentInfo.commissionableAgentParticipantId,
			ns1#SourceCurrencyCode: transactionStagingPayload.currencyCode,
			ns1#SourceCurrencyTransactionAmount: transactionStagingPayload.listPrice when transactionStagingPayload.listPrice? otherwise transactionStagingPayload.commissionPayableAmount,
			ns1#SourceTrxNumber : (([payload.OrderHeader.orderInfo.orderId, (transactionStagingPayload.commercelineItemId splitBy '-')[1] when (sizeOf (transactionStagingPayload.commercelineItemId splitBy '-')) > 1 otherwise transactionStagingPayload.commercelineItemId] joinBy "-" ) ++ getCount(transactionStagingPayload.skuIdType)),
				//when (sizeOf (([payload.OrderHeader.orderInfo.orderId, (transactionStagingPayload.commercelineItemId splitBy '-')[1] when (sizeOf (transactionStagingPayload.commercelineItemId splitBy '-')) > 1 otherwise transactionStagingPayload.commercelineItemId] joinBy "-" ) ++ getCount(transactionStagingPayload.skuIdType))) > 30 
				//otherwise ([payload.OrderHeader.orderInfo.orderId, (transactionStagingPayload.commercelineItemId splitBy '-')[1] when (sizeOf (transactionStagingPayload.commercelineItemId splitBy '-')) > 1 otherwise transactionStagingPayload.commercelineItemId] joinBy "-" ) ++ getCount(transactionStagingPayload.skuIdType),
			//(ns1#SourceTrxNumber : [payload.OrderHeader.orderInfo.orderId,transactionStagingPayload.commercelineItemId,'00' ++ transactionStagingPayloadIndex] joinBy "-" ) when transactionStagingPayload.skuIdType != 'original',
			//ns1#CreditedParticipantId: payload.OrderHeader.agentInfo.commissionableAgentParticipantId,
			ns1#TransactionType : p('TransactionType'),
			ns1#BusinessUnitId : p('BusinessUnitId'),
			ns1#Attribute3 : p('Attribute3'),
			ns1#Attribute27 : p('Attribute27')
			//numberCount: numberCount(transactionStagingPayload.skuIdType)
			
		}
		})),
		ns0#processControl: {
			ns2#returnMode: 'Key',
			ns2#exceptionReturnMode: 'Key',
			ns2#partialFailureAllowed: true as :boolean
		}
	} 
	
	} when (sizeOf payload.commerceItems.commerceItem) > 0 otherwise {NoXML: 'No tag'}]]></dw:set-payload>
		
            </dw:transform-message>
            <object-to-string-transformer mimeType="application/xml" doc:name="Object to String"/>
            <logger message="Json from Java Parsed Data ? #[payload]" level="INFO" doc:name="Logger"/>
        </transactional>

        
    	
    </sub-flow>
    <flow name="system-api-oic-retry-mail-implementationFlow">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml skipNullOn = "everywhere"
---
payload]]></dw:set-payload>
            <dw:set-variable variableName="salesOrderId"><![CDATA[%dw 1.0
%output application/java
---
payload.OrderHeader.orderInfo.orderId]]></dw:set-variable>
        </dw:transform-message>
    </flow>

	<sub-flow name="delete-record-from-APP-Sync">
        <db:select config-ref="Oracle_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[select * from MULE_OWNER.APP_RECOVERY_SYNC_PAYLOAD where TRANSACTION_ID = #[flowVars.salesOrderId] and APP_ID = #[flowVars.appId]]]></db:parameterized-query>




        </db:select>

        <choice doc:name="Choice">
            <when expression="#[payload.size() &gt; 0]">

                <db:delete config-ref="Oracle_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[delete from APP_RECOVERY_SYNC_PAYLOAD where TRANSACTION_ID = #[flowVars.salesOrderId] and APP_ID = #[flowVars.appId]]]></db:parameterized-query>

                </db:delete>
            </when>
            <otherwise>
                <logger message="APP RECOVERY DB - Delete the Existing Record Flow - No Record found with this ID" level="INFO" doc:name="Logger" category="tcc.salesorder.db"/>
            </otherwise>
        </choice>
    </sub-flow>
    
    <flow name="system-api-oic-implementationFlow-Mail-Flow" processingStrategy="synchronous">
    	<dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	systemName: p('oic.mail.systemname'),
	HostName:outboundProperties.host,
	HostIP:outboundProperties.ipAddress,
	mailVerboserecipients: p('smtp.oic.verbose.mailrecipients'),
	mailGenericrecipients: p('smtp.oic.generic.mailrecipients'),
	(request: outboundProperties.request),
	exception: outboundProperties.exceptionMsg,
	mailsubject : p('smtp.mail.subject.prefix') ++ outboundProperties.mailsubject,
	header: p('oic.mail.header')
}]]></dw:set-payload>
            </dw:transform-message>
            <logger message="OIC - Error Message Details to Q - #[payload]" level="INFO" doc:name="Logger"/>
            <jms:outbound-endpoint doc:name="JMS" connector-ref="Active_MQ" queue="${error.notifications.queue}"/>
    </flow>
    
    
</mule>
